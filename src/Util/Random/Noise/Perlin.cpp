#include "Perlin.h"
#include <array>

const std::array lookup =
        {
                0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
                0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
                0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
                -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
                0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
                -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
                -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
                -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
                -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
                0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
                -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
                0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
                0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
                0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
                0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
                -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
                0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
                -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
                -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
                -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
                -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
                0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
                -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
                0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
                0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
                0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
                0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
                -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
                0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
                -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
                -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
                -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
                -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
                0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
                -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
                0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
                0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
                0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
                0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
                -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
                0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
                -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
                -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
                -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
                -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
                0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
                -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
                0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
                0.130526192220052f, 0.99144486137381f, 0.38268343236509f, 0.923879532511287f, 0.608761429008721f,
                0.793353340291235f, 0.793353340291235f, 0.608761429008721f,
                0.923879532511287f, 0.38268343236509f, 0.99144486137381f, 0.130526192220051f, 0.99144486137381f,
                -0.130526192220051f, 0.923879532511287f, -0.38268343236509f,
                0.793353340291235f, -0.60876142900872f, 0.608761429008721f, -0.793353340291235f, 0.38268343236509f,
                -0.923879532511287f, 0.130526192220052f, -0.99144486137381f,
                -0.130526192220052f, -0.99144486137381f, -0.38268343236509f, -0.923879532511287f, -0.608761429008721f,
                -0.793353340291235f, -0.793353340291235f, -0.608761429008721f,
                -0.923879532511287f, -0.38268343236509f, -0.99144486137381f, -0.130526192220052f, -0.99144486137381f,
                0.130526192220051f, -0.923879532511287f, 0.38268343236509f,
                -0.793353340291235f, 0.608761429008721f, -0.608761429008721f, 0.793353340291235f, -0.38268343236509f,
                0.923879532511287f, -0.130526192220052f, 0.99144486137381f,
                0.38268343236509f, 0.923879532511287f, 0.923879532511287f, 0.38268343236509f, 0.923879532511287f,
                -0.38268343236509f, 0.38268343236509f, -0.923879532511287f,
                -0.38268343236509f, -0.923879532511287f, -0.923879532511287f, -0.38268343236509f, -0.923879532511287f,
                0.38268343236509f, -0.38268343236509f, 0.923879532511287f,
        };

// todo: look into replace hash function w/ this??
int hash(int seed, int xPrimed, int yPrimed) {
    int hash = seed ^xPrimed ^yPrimed;

    hash *= 0x27d4eb2d;
    return hash;
}


float gradCoord(int seed, int xPrimed, int yPrimed, float xd, float yd) {
    int hashVal = hash(seed, xPrimed, yPrimed);
    hashVal ^= hashVal >> 15;
    hashVal &= 127 << 1;

    float xg = lookup[hashVal];
    float yg = lookup[hashVal | 1];

    return xd * xg + yd * yg;
}


float lerp(float a, float b, float t) { return a + t * (b - a); }

float interpQuintic(float t) { return t * t * t * (t * (t * 6 - 15) + 10); }

float Perlin::generateNoise(int seed, float x, float y) {
    int x0 = fastFloor(x);
    int y0 = fastFloor(y);

    float xd0 = (float) (x - x0);
    float yd0 = (float) (y - y0);
    float xd1 = xd0 - 1;
    float yd1 = yd0 - 1;

    float xs = interpQuintic(xd0);
    float ys = interpQuintic(yd0);

    x0 *= PrimeX;
    y0 *= PrimeY;
    int x1 = x0 + PrimeX;
    int y1 = y0 + PrimeY;

    float xf0 = lerp(gradCoord(seed, x0, y0, xd0, yd0), gradCoord(seed, x1, y0, xd1, yd0), xs);
    float xf1 = lerp(gradCoord(seed, x0, y1, xd0, yd1), gradCoord(seed, x1, y1, xd1, yd1), xs);

    return lerp(xf0, xf1, ys) * 1.4247691104677813f;
}


